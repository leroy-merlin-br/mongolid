"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[906],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,b=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9981:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:6},o="Casting attributes",s={unversionedId:"casting",id:"casting",title:"Casting attributes",description:"Casting to DateTime",source:"@site/docs/casting.md",sourceDirName:".",slug:"/casting",permalink:"/mongolid/docs/3.6.0/casting",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Converting models",permalink:"/mongolid/docs/3.6.0/converting"},next:{title:"Relationships",permalink:"/mongolid/docs/3.6.0/relationships/"}},l={},c=[{value:"Casting to DateTime",id:"casting-to-datetime",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"casting-attributes"},"Casting attributes"),(0,r.kt)("h2",{id:"casting-to-datetime"},"Casting to DateTime"),(0,r.kt)("p",null,"With Mongolid, you can define attributes to be cast to ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTimeImmutable")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"$casts")," property in your models. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"class Person extends \\Mongolid\\Model\\AbstractModel {\n    protected $casts = [\n        'expires_at' => 'datetime',\n        'birthdate' => 'immutable_datetime',        \n    ];\n}\n")),(0,r.kt)("p",null,"When you define an attribute to be cast as ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTimeImmutable"),", Mongolid will load it from database will do its trick to return an ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," instance(or ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTimeImmutable"),")  anytime you try to access it with property accessor operator (",(0,r.kt)("inlineCode",{parentName:"p"},"->"),")."),(0,r.kt)("p",null,"If you need to manipulate its original value on MongoDB, then you can access it through ",(0,r.kt)("inlineCode",{parentName:"p"},"getDocumentAttributes()")," method"),(0,r.kt)("p",null,"To write a value on an attribute with ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," cast, you can use both an ",(0,r.kt)("inlineCode",{parentName:"p"},"\\MongoDB\\BSON\\UTCDateTime"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"\\DateTime")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"\\DateTimeImmutable")," instance.\nInternally, Mongolid will manage to set the property as an UTCDateTime, because it is the datetime format accepted by MongoDB."),(0,r.kt)("p",null,"Check out some usages and examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"\n$user = Person::first();\n$user->birthdate; // Returns birthdate as a DateTimeImmutable instance\n$user->expires_at; // Returns expires_at as DateTime instance\n\n$user->getOriginalDocumentAttributes()['birthdate']; // Returns birthdate as an \\MongoDB\\BSON\\UTCDateTime instance\n\n// To set a new birthdate, you can pass both UTCDateTime or native's PHP DateTime\n$user->birthdate = new \\MongoDB\\BSON\\UTCDateTime($anyDateTime);\n$user->birthdate = DateTime::createFromFormat('d/m/Y', '01/03/1970');\n\n\n")))}u.isMDXComponent=!0}}]);