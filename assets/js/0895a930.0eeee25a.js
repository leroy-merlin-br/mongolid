"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[125],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||s;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={id:"mass-assignments",sidebar_position:4},i="Mass assignment",o={unversionedId:"mass-assignments",id:"mass-assignments",title:"Mass assignment",description:"If you are extending Mongolid\\Model\\AbstractModel you can set an array of attributes to the model using the fill method.",source:"@site/docs/mass-assignments.md",sourceDirName:".",slug:"/mass-assignments",permalink:"/mongolid/docs/3.2.0/mass-assignments",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"mass-assignments",sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Operations",permalink:"/mongolid/docs/3.2.0/operations"},next:{title:"Converting models",permalink:"/mongolid/docs/3.2.0/converting"}},l={},p=[],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mass-assignment"},"Mass assignment"),(0,r.kt)("p",null,"If you are extending ",(0,r.kt)("inlineCode",{parentName:"p"},"Mongolid\\Model\\AbstractModel")," you can set an array of attributes to the model using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fill")," method.\nThese attributes are then assigned to the model via mass-assignment."),(0,r.kt)("p",null,"This is convenient, however, can be a ",(0,r.kt)("strong",{parentName:"p"},"serious")," security concern when blindly passing user input into a model.\nIf user input is blindly passed into a model, the user is free to modify ",(0,r.kt)("strong",{parentName:"p"},"any")," and ",(0,r.kt)("strong",{parentName:"p"},"all")," the model's attributes.\nBy default, all attributes are fillable."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Mongolid\\Model\\AbstractModel")," (and ",(0,r.kt)("inlineCode",{parentName:"p"},"Mongolid\\Model\\HasAttributesTrait"),") will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fillable")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"guarded")," properties on your model."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fillable")," property specifies which attributes should be mass-assignable. This can be set at the class or instance level."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Defining fillable attributes on a model"',title:'"Defining',fillable:!0,attributes:!0,on:!0,a:!0,'model"':!0},"    class Post extends \\Mongolid\\Model\\AbstractModel {\n    \n        protected $fillable = ['title', 'category', 'body'];\n    \n    }\n")),(0,r.kt)("p",null,"In this example, only the three listed attributes will be mass-assignable."),(0,r.kt)("p",null,"The inverse of ",(0,r.kt)("inlineCode",{parentName:"p"},"fillable")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"guarded"),', and serves as a "black-list" instead of a "white-list":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Defining guarded attributes on a model"',title:'"Defining',guarded:!0,attributes:!0,on:!0,a:!0,'model"':!0},"    class Post extends \\Mongolid\\Model\\AbstractModel {\n    \n        protected $guarded = ['_id', 'votes'];\n    \n    }\n")),(0,r.kt)("p",null,"In the example above, the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"votes")," attributes may ",(0,r.kt)("strong",{parentName:"p"},"not")," be mass assigned.\nAll other attributes will be mass assignable."),(0,r.kt)("p",null,"You can mass assign attributes using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fill")," static method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Mass assigning attributes"',title:'"Mass',assigning:!0,'attributes"':!0},"    $post = new Post;\n    $post = $post->fill(['title' => 'Bacon'], $post);\n    // or\n    $post = Post::fill(['title' => 'Bacon'], $post);\n")))}c.isMDXComponent=!0}}]);