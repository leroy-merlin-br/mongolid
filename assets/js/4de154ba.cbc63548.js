"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[613],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6339:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},i="Operations",l={unversionedId:"operations",id:"operations",title:"Operations",description:"Insert, Update, Delete",source:"@site/docs/operations.md",sourceDirName:".",slug:"/operations",permalink:"/mongolid/docs/3.6.0/operations",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Mongolid Cursor",permalink:"/mongolid/docs/3.6.0/cursor"},next:{title:"Mass assignment",permalink:"/mongolid/docs/3.6.0/mass-assignments"}},s={},p=[{value:"Insert, Update, Delete",id:"insert-update-delete",level:2},{value:"Reload a model from database",id:"reload-a-model-from-database",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"operations"},"Operations"),(0,a.kt)("h2",{id:"insert-update-delete"},"Insert, Update, Delete"),(0,a.kt)("p",null,"To create a new document in the database from a model, simply create a new model instance and call the ",(0,a.kt)("inlineCode",{parentName:"p"},"save")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Saving a new model"',title:'"Saving',a:!0,new:!0,'model"':!0},"    $post = new Post();\n    \n    $post->title = 'Foo bar john doe';\n    \n    $post->save();\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Typically, your Mongolid models will have auto-generated ",(0,a.kt)("inlineCode",{parentName:"p"},"_id")," keys.\nHowever, if you wish to specify your own keys, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"_id")," attribute.")),(0,a.kt)("p",null,"To update a model, you may retrieve it, change an attribute, and use the ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Updating a retrieved model"',title:'"Updating',a:!0,retrieved:!0,'model"':!0},"    $post = Post::first('4af9f23d8ead0e1d32000000');\n    \n    $post->subject = 'technology';\n    \n    $post->update();\n")),(0,a.kt)("p",null,"To delete a model, simply call the ",(0,a.kt)("inlineCode",{parentName:"p"},"delete")," method on the instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Deleting an existing model"',title:'"Deleting',an:!0,existing:!0,'model"':!0},"    $post = Post::first('4af9f23d8ead0e1d32000000');\n    \n    $post->delete();\n")),(0,a.kt)("h2",{id:"reload-a-model-from-database"},"Reload a model from database"),(0,a.kt)("p",null,"You can reload an instance from database by using ",(0,a.kt)("inlineCode",{parentName:"p"},"refresh()")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    $post = Post::first('4af9f23d8ead0e1d32000000');\n\n    $updatedPost = $post->refresh();\n")))}m.isMDXComponent=!0}}]);