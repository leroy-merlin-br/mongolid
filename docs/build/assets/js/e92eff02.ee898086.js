"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[416],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),m=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=m(e.components);return o.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=m(t),h=a,u=c["".concat(d,".").concat(h)]||c[h]||p[h]||r;return t?o.createElement(u,i(i({ref:n},s),{},{components:t})):o.createElement(u,i({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<r;m++)i[m]=t[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var o=t(7462),a=(t(7294),t(3905));const r={},i="Embeds",l={unversionedId:"relationships/embeds",id:"relationships/embeds",title:"Embeds",description:"Read MongoDB - Embedded Data Models",source:"@site/docs/relationships/embeds.md",sourceDirName:"relationships",slug:"/relationships/embeds",permalink:"/docs/3.2.0/relationships/embeds",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Relationships",permalink:"/docs/3.2.0/relationships/"},next:{title:"References",permalink:"/docs/3.2.0/relationships/references"}},d={},m=[{value:"Embeds One",id:"embeds-one",level:2},{value:"Defining An Embeds One Relation",id:"defining-an-embeds-one-relation",level:3},{value:"To retrieve an embedded document:",id:"to-retrieve-an-embedded-document",level:3},{value:"In order to embed a document:",id:"in-order-to-embed-a-document",level:3},{value:"Embeds many",id:"embeds-many",level:2}],s={toc:m};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"embeds"},"Embeds"),(0,a.kt)("p",null,"Read ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.org/manual/core/data-model-design/#embedded-data-models"},"MongoDB - Embedded Data Models"),"\nto learn more how to take advantage of document embedding."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/3.2.0/legacy/embeds"},"Legacy embeds")," ",(0,a.kt)("em",{parentName:"li"},"For compatibility with version 2.x"))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"embeds-one"},"Embeds One"),(0,a.kt)("p",null,"An Embeds One relationship is a very basic relation.\nFor example, a ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," model might have one ",(0,a.kt)("inlineCode",{parentName:"p"},"Phone"),".\nWe can define this relation in Mongolid:"),(0,a.kt)("h3",{id:"defining-an-embeds-one-relation"},"Defining An Embeds One Relation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    class Person extends \\Mongolid\\Model\\AbstractModel {\n        // This model is saved in the collection people\n        protected $collection = 'people';\n    \n        // Method that will be used to access the phone\n        public function phone()\n        {\n            // highlight-next-line\n            return $this->embedsOne(Phone::class, 'phone');\n        }\n    }\n    \n    class Phone extends \\Mongolid\\Model\\AbstractModel {\n        // This model will be embedded only\n        protected $collection = null;\n    \n        public function getFullPhone()\n        {\n            return '+' . $this->regionCode . $this->number;\n        }\n    }\n")),(0,a.kt)("p",null,"The first argument passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"embedsOne")," method is the name of the related model.\nThe second argument is in what attribute that object will be embedded.\nOnce the relationship is defined, we can retrieve and embed documents."),(0,a.kt)("h3",{id:"to-retrieve-an-embedded-document"},"To retrieve an embedded document:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"First we get the relation:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    $relation = User::find('4af9f23d8ead0e1d32000000')->phone();\n")),(0,a.kt)("admonition",{parentName:"li",type:"info"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"mdxAdmonitionTitle"},"Explanation"),":"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Query for the user with the ",(0,a.kt)("inlineCode",{parentName:"li"},"_id")," ",(0,a.kt)("em",{parentName:"li"},"'4af9f23d8ead0e1d32000000'")),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"phone()")," method will return an ",(0,a.kt)("inlineCode",{parentName:"li"},"EmbedsOne")," instance, that is extended of an ",(0,a.kt)("inlineCode",{parentName:"li"},"AbstractRelation")," class."),(0,a.kt)("li",{parentName:"ul"},"That is, the relationship we were trying to obtain.")))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Then we can obtain the model this way:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    $phone = $relation->get();\n")),(0,a.kt)("p",{parentName:"li"},"OR inline:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    $phone = User::find('4af9f23d8ead0e1d32000000')->phone()->get();\n")),(0,a.kt)("admonition",{parentName:"li",type:"info"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"mdxAdmonitionTitle"},"Explanation")),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Instantiate a ",(0,a.kt)("strong",{parentName:"li"},"Phone")," object with the attributes found in ",(0,a.kt)("inlineCode",{parentName:"li"},"phone")," attribute of the user"),(0,a.kt)("li",{parentName:"ul"},"Return that object"))))),(0,a.kt)("h3",{id:"in-order-to-embed-a-document"},"In order to embed a document:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    // The object that will be embedded\n    $phone = new Phone();\n    $phone->regionCode = '55';\n    $phone->number = '1532323232';\n    \n    // The object that will contain the phone\n    $user = User::first('4af9f23d8ead0e1d32000000');\n    \n    // This method will embed the $phone into the phone attribute of the user\n    // highlight-next-line\n    $user->phone()->add($phone);\n    \n    $user->save();\n    \n    // Now we can retrieve the relationship by calling\n    $user->phone(); // Will return Embeds object\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"When using Mongolid models you will need to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"save()")," method after embeding or attaching objects.\nThe changes will only persist after you call the 'save()' method.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"embeds-many"},"Embeds many"),(0,a.kt)("p",null,'An example of an Embeds Many relation is a blog post that "has many" comments. We can model this relation like so:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    class Post extends \\Mongolid\\Model\\AbstractModel {\n        protected $collection = 'posts';\n    \n        public function comments()\n        {\n            // highlight-next-line\n            return $this->embedsMany(Comment::class, 'comments');\n        }\n    \n    }\n    \n    class Comment extends \\Mongolid\\Model\\AbstractModel {\n        // This model will be embedded only\n        protected $collection = null;\n    }\n")),(0,a.kt)("p",null,"Now we can access the post's comments ",(0,a.kt)("inlineCode",{parentName:"p"},"EmbeddedCursor")," through the comments method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    $comments = Post::find('4af9f23d8ead0e1d32000000')->comments()->get();\n")),(0,a.kt)("p",null,"Now you can iterate and perform cursor operations in the ",(0,a.kt)("inlineCode",{parentName:"p"},"EmbeddedCursor")," that is retrieved"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    foreach($comments->limit(10) as $comment)\n    {\n        // do something\n    }\n")),(0,a.kt)("p",null,"Once you have the EmbedsMany relationship, you are able to use the methods of this object in order to manipulate this embedded documents."),(0,a.kt)("p",null,"Like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"->add();\n->addMany();\n->replace();\n->remove();\n->removeAll();\n->get();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"    $commentA = new Comment();\n    $commentA->content = 'Cool feature bro!';\n    \n    $commentB = new Comment();\n    $commentB->content = 'Awesome!';\n    \n    $post = Post::first('4af9f23d8ead0e1d32000000');\n    \n    // Add one comment\n    $post->comments()->add($commentA);\n    \n    // Add multiple comments\n    $post->comments()->addMany([$commentA, $commentB]);\n    \n    // Replace all comments already exists\n    $post->comments()->replace([$commentA, $commentB]);\n    \n    // In order to remove a comment\n    $post->comments()->remove($commentB);\n    \n    // To remove all comments\n    $post->comments()->removeAll();\n    \n    $post->save();\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"When using Mongolid models you will need to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"save()")," method after embeding or attaching objects.\nThe changes will only persist after you call the 'save()' method.")))}p.isMDXComponent=!0}}]);